name: JUnit and Coverage Report # action 的名称

on: # 什么时候触发 action
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions: write-all

jobs:
  build: # 单元测试
    runs-on: ubuntu-latest
    env:
      TEST_JUNIT_PATH: ${{ github.workspace }}/**/TEST-*.xml
      TEST_JACOCO_PATH: ${{ github.workspace }}/**/jacoco.xml
    steps: # 步骤
      - name: "拉取仓库代码"
        uses: actions/checkout@v3
      - name: "查看代码目录"
        run: |
          pwd && ls -lah
      - name: "设置JDK环境"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven # 缓存依赖项
      - name: "安装Node.js环境"
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: "安装Maven环境"
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2
      - name: "输出JDK、Maven和Node.js的版本"
        run: |
          mvn -v
          node -v
          java -version
      - name: "设置Maven本地仓库"
        if: always()
        uses: skjolber/maven-cache-github-action@v2.0
        with:
          step: restore
      - name: "Maven编译"
        run: |
          cd mybatis-flex-mysql8-springboot2
          mvn clean install -Dmaven.test.skip=false -Ptest --batch-mode --update-snapshots verify
      - name: "将指定的单元测试文件进行压缩"
        if: always()
        run: |
          # 根据指定的规则查找文件
          xml_files=$(find "${{ github.workspace }}" -type f -name 'TEST-*.xml')
          # 创建临时目录用来存储这些文件
          tmp_dir=$(mktemp -d)
          for file in $xml_files; do
            cp "$file" "$tmp_dir"
          done
          # 打包
          tar -cvf archive.tar.gz -C "$tmp_dir" .
          # 删除临时目录
          rm -rf "$tmp_dir"
      - name: "上传archive.tar.gz压缩文件"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: archive
          path: archive.tar.gz
      - name: "将依赖jar缓存到Maven本地仓库"
        if: always()
        uses: skjolber/maven-cache-github-action@v2.0
        with:
          step: save
  notice_success: # 成功的通知
    needs: build
    if: ${{ !cancelled() && (success() || needs.build.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: "成功的通知"
        if: ${{ contains(needs.*.result, 'success') }}
        run: |
          echo "开源项目：${{ github.repository }}"
          echo "构建状态：单元测试构建成功"
          echo "工作流地址：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  notice_failure: # 失败的通知
    needs: build
    if: ${{ !cancelled() && (failure() || needs.build.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: "失败的通知（创建issue）"
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: actions/github-script@v6
        with:
          script: |
            // 仓库的所有者
            const owner = context.payload.repository.owner.login;
            // 仓库
            const repo = context.payload.repository.name;
            // 提交的 sha
            const commit = context.sha;
            // 工作流
            const workflow = context.workflow;
            // 触发者
            const actor = context.actor;
            // 推送者的邮箱
            const pusherEmail = context.payload.pusher?.email
            // 推送者的姓名
            const pusherName = context.payload.pusher?.name
            // 工作流地址
            const workflowRunId = context.runId;
            const workflowURL = `https://github.com/${owner}/${repo}/actions/runs/${workflowRunId}`;
            console.log('workflowURL',workflowURL)
            // 拼接提示消息~
            const message = `
              [单元测试构建失败，点击查看](${workflowURL})
              提交: ${commit}
              工作流: ${workflow}
              触发者: ${actor}
              提交者：${pusherName}
            `
            // 设置 issues
            const result = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '单元测试构建失败',
              body: message,
              labels: ['bug','question','help wanted']
            });
            
            console.log("context ==> "+ context)
            console.log("context ==> "+ JSON.stringify(context))
  junit-coverage: # 单元测试覆盖率
    needs: build
    if: ${{ !cancelled() && (failure() || success() || needs.build.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: "下载archive.tar.gz压缩文件"
        uses: actions/download-artifact@v3
        with:
          name: archive
      - name: "解压archive.tar.gz压缩文件"
        run: |
          ls -lah .
          tar -xvf archive.tar.gz
          ls -lah .
      - name: "生成单元测试报告"
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          files: |
            TEST-*.xml
